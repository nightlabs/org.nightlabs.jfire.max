<!--
  Generic j2ee (jboss/jpox) ant build file (version 2006-05-16)
  Author: marc [at] nightlabs [dot] de
  Author: marco [at] nightlabs [dot] de

  Do NOT modify this file!!! It must be the same in all j2ee-modules and libraries!
  Instead, you can create local ant build files:
    - build-nightlabs-clean.pre.xml
    - build-nightlabs-clean.post.xml
    - build-nightlabs-compile.pre.xml
    - build-nightlabs-compile.main.pre.xml
    - build-nightlabs-compile.main.post.xml
    - build-nightlabs-compile.client.main.pre.xml
    - build-nightlabs-compile.client.main.post.xml
    - build-nightlabs-compile.post.xml
    - build-nightlabs-dist.pre.xml
    - build-nightlabs-dist.post.xml
    - build-nightlabs-dist.bin.pre.xml
    - build-nightlabs-dist.bin.post.xml
    - build-nightlabs-dist.bin.client.pre.xml
    - build-nightlabs-dist.bin.client.post.xml
    - build-nightlabs-dist.client.pre.xml
    - build-nightlabs-dist.client.post.xml
    - build-nightlabs-dist.bin.rar.pre.xml
    - build-nightlabs-dist.bin.rar.post.xml
    - build-nightlabs-dist.bin.war.pre.xml
    - build-nightlabs-dist.bin.war.post.xml
    - build-nightlabs-deploy.pre.xml
    - build-nightlabs-deploy.post.xml
-->
<project default="dist" name="nightlabs.j2ee">

	<!-- Initialize all needed properties -->
  <target name="init">
    <!-- Set the name of this file. Is there another way?? -->
    <property name="build.file" value="build-nightlabs.xml"/>

    <!-- Read properties and xml files -->
    <property file="build-nightlabs-path.properties"/>
    <property file="build-nightlabs.properties"/>
    <property file="build.properties"/>
    <xmlproperty file=".project" collapseAttributes="true"/>

		<!-- Initialize used properties to default values -->
  	<condition property="javac.debug" value="true">
  	  <not>
  	    <isset property="javac.debug"/>
  	  </not>
    </condition>
  	<!-- java compiler option: source (e.g. "1.3", "1.4", "1.5") -->
  	<condition property="javac.source" value="1.5">
  	  <not>
  	    <isset property="javac.source"/>
  	  </not>
    </condition>
  	<!-- java compiler option: target (e.g. "1.3", "1.4", "1.5") -->
  	<condition property="javac.target" value="${javac.source}">
      <not>
  	    <isset property="javac.target"/>
  	  </not>
  	</condition>
    <!-- set src.dir to "src" if not already defined -->
    <condition property="src.dir" value="src">
      <not>
        <isset property="src.dir"/>
      </not>
    </condition>
    <!-- set ejbsrc.dir to "ejbsrc" if not already defined -->
    <condition property="ejbsrc.dir" value="ejbsrc">
      <not>
        <isset property="ejbsrc.dir"/>
      </not>
    </condition>
    <!-- set bin.dir to "bin" if not already defined -->
    <condition property="bin.dir" value="bin">
      <not>
        <isset property="bin.dir"/>
      </not>
    </condition>
    <!-- set project.dir to "." if not already defined -->
    <condition property="project.dir" value=".">
      <not>
        <isset property="project.dir"/>
      </not>
    </condition>
    <!-- set dist.dir to "dist" if not already defined -->
    <condition property="dist.dir" value="dist">
      <not>
        <isset property="dist.dir"/>
      </not>
    </condition>
    <!-- use the plugin-id from plugin.xml as project.name
         if not already defined. -->
    <condition property="project.name" value="${projectDescription.name}">
      <and>
        <not>
          <isset property="project.name"/>
        </not>
        <isset property="projectDescription.name"/>
      </and>
    </condition>
    <!-- set project.jar to "${project.name}.jar" if not already defined -->
    <condition property="project.jar" value="${project.name}.jar">
      <and>
        <not>
          <isset property="project.jar"/>
        </not>
        <isset property="project.name"/>
      </and>
    </condition>
    <!-- set j2ee.war.enable to false if not already defined -->
    <condition property="j2ee.war.enable" value="false">
      <not>
        <isset property="j2ee.war.enable"/>
      </not>
    </condition>
    <!-- set project.war to "${project.name}.war" if not already defined -->
    <condition property="project.war" value="${project.name}.war">
      <and>
        <not>
          <isset property="project.war"/>
        </not>
        <isset property="project.name"/>
      </and>
    </condition>
    <!-- set j2ee.rar.enable to false if not already defined -->
    <condition property="j2ee.rar.enable" value="false">
      <not>
        <isset property="j2ee.rar.enable"/>
      </not>
    </condition>
    <!-- set project.rar to "${project.name}.rar" if not already defined -->
    <condition property="project.rar" value="${project.name}.rar">
      <and>
        <not>
          <isset property="project.rar"/>
        </not>
        <isset property="project.name"/>
      </and>
    </condition>
    <!-- set j2ee.client.enable to false if not already defined -->
    <condition property="j2ee.client.enable" value="false">
      <not>
        <isset property="j2ee.client.enable"/>
      </not>
    </condition>
    <!-- set j2ee.client.jar to "${project.name}-client.jar" if not already defined -->
    <condition property="j2ee.client.jar" value="${project.name}-client.jar">
      <not>
        <isset property="j2ee.client.jar"/>
      </not>
    </condition>
    <!-- set j2ee.ear to "${project.name}.ear" if not already defined -->
    <condition property="j2ee.ear" value="${project.name}.ear">
      <and>
        <not>
          <isset property="j2ee.ear"/>
        </not>
        <isset property="project.name"/>
      </and>
    </condition>
    <!-- set dist.dir to "dist" if not already defined -->
    <condition property="j2ee.deployear.includes" 
      value="${project.jar},${project.war},${project.rar}">
      <not>
        <isset property="j2ee.deployear.includes"/>
      </not>
    </condition>
    <condition property="j2ee.deployear.excludes" value="">
      <not>
        <isset property="j2ee.deployear.excludes"/>
      </not>
    </condition>
    <condition property="j2ee.deploysubdir.includes" value="*.xml">
      <not>
        <isset property="j2ee.deploysubdir.includes"/>
      </not>
    </condition>
    <condition property="j2ee.deploysubdir.excludes" value="application.xml">
      <not>
        <isset property="j2ee.deploysubdir.excludes"/>
      </not>
    </condition>
    <condition property="j2ee.deploymetainf.includes" value="application.xml">
      <not>
        <isset property="j2ee.deploymetainf.includes"/>
      </not>
    </condition>
    <condition property="j2ee.deploymetainf.excludes" value="">
      <not>
        <isset property="j2ee.deploymetainf.excludes"/>
      </not>
    </condition>

    <condition property="dist.bin.includes" value="**/*">
      <not>
        <isset property="dist.bin.includes"/>
      </not>
    </condition>
    <condition property="dist.bin.excludes" value="**/log4j.*">
      <not>
        <isset property="dist.bin.excludes"/>
      </not>
    </condition>

    <!-- print properties for debugging -->
    <!--
    <echo>project name: ${project.name}</echo>
    <echo>project dir: ${project.dir}</echo>
    <echo>project jar: ${project.jar}</echo>
    <echo>src dir: ${project.dir}/${src.dir}</echo>
    <echo>bin dir: ${project.dir}/${bin.dir}</echo>
    <echo>dist dir: ${project.dir}/${dist.dir}</echo>
    <echo>clean includes: ${clean.includes}</echo>
    <echo>clean excludes: ${clean.excludes}</echo>
    <echo>j2ee.xdoclet.enable: ${j2ee.xdoclet.enable}</echo>
    <echo>j2ee.jpoxenhance.enable: ${j2ee.jpoxenhance.enable}</echo>
    <echo>j2ee.deploy.dir: ${j2ee.deploy.dir}</echo>
    <echo>j2ee.deploy.subdir: ${j2ee.deploy.subdir}</echo>
    <echo>j2ee.ear: ${j2ee.ear}</echo>
    <echo>j2ee.deploy.includes: ${j2ee.deploy.includes}</echo>
    <echo>j2ee.client.enable: ${j2ee.client.enable}</echo>
    <echo>dist.bin.includes: ${dist.bin.includes}</echo>
    <echo>dist.bin.excludes: ${dist.bin.excludes}</echo>
		-->
    <echo>dist.bin.includes: ${dist.bin.includes}</echo>
    <echo>dist.bin.excludes: ${dist.bin.excludes}</echo>

  </target>

		<!-- This macro executes a target in the local buildfile
		       (attribute target extended with the prefix "build-nightlabs-" and the suffix ".xml")
		       if a given value is true (attribute boolean) and the local build file exists. -->
		<macrodef name="dolocaliftrue">
			<attribute name="boolean"/>
			<attribute name="target"/>
			<sequential>
			  	<!-- ${doexec} is set to true, if the build-nightlabs-@{target}.xml exists
			  		and ${boolean} is true. In this case, the local file will be called. -->
				<property name="build.file.local-@{target}-@{boolean}" value="build-nightlabs-@{target}.xml"/>
			  	<available file="${build.file.local-@{target}-@{boolean}}" property="doexec-@{target}-@{boolean}" value="@{boolean}"/>
				<condition property="doexec-@{target}-@{boolean}" value="false">
					<not><isset property="doexec-@{target}-@{boolean}"/></not>
				</condition>

				<echo>doexec-@{target}-@{boolean}: ${doexec-@{target}-@{boolean}}</echo>

				<internal_doiftrue boolean="${doexec-@{target}-@{boolean}}" target="@{target}" buildfile="${build.file.local-@{target}-@{boolean}}"/>
			</sequential>
		</macrodef>

		<!-- This macro executes a target in this buildfile
	       (attribute target) if a given value is true
	       (attribute boolean) by creating a temporary 
	       buildfile and calling back this buildfile from
	       there. -->
		<macrodef name="doiftrue">
			<attribute name="boolean"/>
			<attribute name="target"/>
			<sequential>
				<internal_doiftrue boolean="@{boolean}" target="@{target}" buildfile="${build.file}"/>
			</sequential>
		</macrodef>

		<!-- This macro executes a target in this buildfile
	       (attribute target) if a given value is true
	       (attribute boolean) by creating a temporary 
	       buildfile and calling back this buildfile from
	       there. -->
		<macrodef name="internal_doiftrue">
			<attribute name="boolean"/>
			<attribute name="target"/>
			<attribute name="buildfile"/>
			<sequential>
				<property name="tmpbuildfile.@{target}-@{boolean}-@{buildfile}.name" value=".tmpbuild-@{target}-@{boolean}.xml"/>
				<property name="tmpbuildfile.@{target}-@{boolean}-@{buildfile}.content.pre" value="&lt;project name=&quot;tmp-build&quot; default=&quot;run&quot;&gt;&lt;target name=&quot;run&quot;&gt;"/>
				<property name="tmpbuildfile.@{target}-@{boolean}-@{buildfile}.content.post" value="&lt;/target&gt;&lt;/project&gt;"/>
				<condition property="tmpbuildfile.@{target}-@{boolean}-@{buildfile}.content" value="&lt;ant antfile=&quot;@{buildfile}&quot; target=&quot;@{target}&quot;/&gt;">
					<istrue value="@{boolean}"/>
				</condition>
				<condition property="tmpbuildfile.@{target}-@{boolean}-@{buildfile}.content" value="">
					<not><isset property="tmpbuildfile.@{target}-@{boolean}-@{buildfile}.content"/></not>
				</condition>
				<echo file="${tmpbuildfile.@{target}-@{boolean}-@{buildfile}.name}">${tmpbuildfile.@{target}-@{boolean}-@{buildfile}.content.pre}${tmpbuildfile.@{target}-@{boolean}-@{buildfile}.content}${tmpbuildfile.@{target}-@{boolean}-@{buildfile}.content.post}</echo>
				<ant antfile="${tmpbuildfile.@{target}-@{boolean}-@{buildfile}.name}"/>
				<delete file="${tmpbuildfile.@{target}-@{boolean}-@{buildfile}.name}"/>
			</sequential>
		</macrodef>

	<!-- ############################################ -->

	<!-- Delete all created files according to
       properties clean.includes and clean.excludes -->
	<target name="clean" depends="init" description="Delete all files and directories created by this build file">
		<dolocaliftrue boolean="true" target="clean.pre"/>
    <!-- could we scan project.dir recursively to
         find .cvsignore files and delete all
         files/dirs mentioned there?? -->
    <delete includeEmptyDirs="true" verbose="true">
			<fileset dir="${project.dir}" excludes="${clean.excludes}" includes="${clean.includes}"/>      
    </delete>
		<dolocaliftrue boolean="true" target="clean.post"/>
  </target>

	<!-- Compile all source files and copy all non-java
       files from src.dir to bin.dir -->
  <target name="compile" depends="init, compile.pre, compile.main, compile.post" description="Compile this project using XDoclet and JDO-Enhancement if configured">
  </target>

	<!-- Compile all client source files and copy all non-java
       files from src.dir and ejbsrc.dir to bin.dir -->
  <target name="compile.client" depends="init, compile.pre, compile.client.main, compile.post" description="Compile a client package as configured">
  </target>

	<!-- Create all available dist formats -->
  <target name="dist" depends="init" description="Create distribution archives">
  	<dolocaliftrue boolean="true" target="dist.pre"/>
	  <doiftrue boolean="${j2ee.client.enable}" target="dist.bin.client"/>
    <ant antfile="${build.file}" target="dist.bin"/>
	  <doiftrue boolean="${j2ee.war.enable}" target="dist.bin.war"/>
	  <doiftrue boolean="${j2ee.rar.enable}" target="dist.bin.rar"/>
  	<dolocaliftrue boolean="true" target="dist.post"/>
  </target>

	<!-- Create client dist -->
  <target name="dist.client" depends="init" description="Create client distributio package as configured">
  	<dolocaliftrue boolean="true" target="dist.client.pre"/>
	  <doiftrue boolean="${j2ee.client.enable}" target="dist.bin.client"/>
  	<dolocaliftrue boolean="true" target="dist.client.post"/>
  </target>

	<!-- deploy all from j2ee.deploy.includes to the server -->
	<target name="deploy" depends="dist" description="Deploy this project to the J2EE server">
		<dolocaliftrue boolean="true" target="deploy.pre"/>
    <mkdir dir="${j2ee.deploy.dir}/${j2ee.deploy.subdir}"/>
    <copy todir="${j2ee.deploy.dir}/${j2ee.deploy.subdir}">
      <fileset dir="${project.dir}/${dist.dir}" includes="${j2ee.deploysubdir.includes}" excludes="${j2ee.deploysubdir.excludes}"/>
    </copy>
    <mkdir dir="${j2ee.deploy.dir}/${j2ee.deploy.subdir}/${j2ee.ear}"/>
    <copy todir="${j2ee.deploy.dir}/${j2ee.deploy.subdir}/${j2ee.ear}">
      <fileset dir="${project.dir}/${dist.dir}" includes="${j2ee.deployear.includes}" excludes="${j2ee.deployear.excludes}"/>
    </copy>
    <mkdir dir="${j2ee.deploy.dir}/${j2ee.deploy.subdir}/${j2ee.ear}/META-INF"/>
    <copy todir="${j2ee.deploy.dir}/${j2ee.deploy.subdir}/${j2ee.ear}/META-INF">
      <fileset dir="${project.dir}/${dist.dir}" includes="${j2ee.deploymetainf.includes}" excludes="${j2ee.deploymetainf.excludes}"/>
    </copy>
    <delete verbose="true" includeemptydirs="true"><fileset dir="${j2ee.deploy.dir}/${j2ee.deploy.subdir}/${j2ee.ear}" includes="META-INF"/></delete>
		<dolocaliftrue boolean="true" target="deploy.post"/>
  </target>

	<!-- Set up environment for xdoclet. Then call the needed
       xdoclet subtasks -->
  <target name="xdoclet" depends="init" description="Run XDoclet as configured">
    <path id="xdoclet.classpath">
      <pathelement location="${project.dir}/${bin.dir}" />
    	<fileset dir="${eclipse.sdk}/plugins">
        <include name="**/ant.jar"/>
        <include name="**/sf.net.xdoclet*/*.jar"/>
        <include name="**/org.apache.log4j*/**/*.jar"/>
        <include name="**/org.apache.commons*/**/*.jar"/>
    	</fileset>
      <!-- append the external classpath lastly -->
      <pathelement path="${java.class.path}" />
      <!-- append the path sent through eclipse to classpath -->
      <pathelement path="${project.path}" />
    </path>
    <doiftrue boolean="${j2ee.xdoclet.jdodoclet.enable}" target="xdoclet.jdodoclet"/>
    <doiftrue boolean="${j2ee.xdoclet.ejbdoclet.enable}" target="xdoclet.ejbdoclet"/>
  </target>
    
	<!-- run jpox enhancer -->
  <target name="jpoxenhance" depends="init" description="Run JPOX JDO Enhancer">
    <path id="jpoxenhancer.classpath">
      <pathelement path="${project.dir}/${bin.dir}"/>
      <pathelement path="${project.dir}/${ejbsrc.dir}"/>
      <pathelement path="${project.path}" />
      <pathelement path="${java.class.path}" />
    </path>

    <taskdef name="jpoxenhancer" classname="org.jpox.enhancer.tools.EnhancerTask">
      <classpath refid="jpoxenhancer.classpath"/>
    </taskdef>

    <jpoxenhancer classpathref="jpoxenhancer.classpath"
        dir="${project.dir}/${bin.dir}"
        failonerror="true"
        fork="false"
        verbose="true">
    </jpoxenhancer>
  </target>

	<!-- ############################################ -->

	<!-- Invoke xdoclet for JDO2 meta file generation -->
	<target name="xdoclet.jdodoclet" description="internal: Run JDO2-Doclet" >
		<taskdef name="jdodoclet" classname="xdoclet.modules.jdo.JdoDocletTask">
			<classpath refid="xdoclet.classpath"/>
		</taskdef>
		<jdodoclet jdospec="2.0" destdir="${project.dir}/${ejbsrc.dir}">
			<fileset dir="${project.dir}/${src.dir}" defaultexcludes="yes"/>
			<jdometadata project="package" generation="package"/>
 			<jdoobjectidgenerator interfaces="org.nightlabs.jdo.ObjectID"/>
		</jdodoclet>
	</target>
  
  <!-- Invoke xdoclet for EJB interface/utility-class generation -->
  <target name="xdoclet.ejbdoclet" description="internal: Run EJB-Doclet">
    <property name="ejb.dd.dir" value="${project.dir}/${project.name}/META-INF"/>
    <property name="web.dd.dir" value="${project.dir}/${project.name}/WEB-INF"/>
    <property name="xdoclet.force" value="true"/>
    <property name="container.type" value="ejb-jar"/>
    <taskdef name="ejbdoclet" classname="xdoclet.modules.ejb.EjbDocletTask">
			<classpath refid="xdoclet.classpath"/>
		</taskdef>

    <ejbdoclet destdir="${project.dir}/${ejbsrc.dir}" 
      mergedir="${ejb.dd.dir}" excludedtags="@version,@author,@todo" 
      addedtags="@build-nightlabs.xml generated" ejbspec="2.0" force="${xdoclet.force}" 
      verbose="true" >
      <fileset dir="${project.dir}/${src.dir}" 
        excludes="${j2ee.xdoclet.ejbdoclet.excludes}" 
        includes="${j2ee.xdoclet.ejbdoclet.includes}"/>
      <dataobject/>
      <dao pattern="{0}" destdir="${project.dir}/${ejbsrc.dir}"/>
      <valueobject/>
      <utilobject cacheHomes="true" includeGUID="true"/>
      <remoteinterface/>
      <localinterface/>
      <homeinterface />
      <localhomeinterface/>
      <entitypk/>
      <entitycmp/>
      <entitybmp/>
      <session/>
      <deploymentdescriptor destdir="${ejb.dd.dir}" validatexml="false" mergedir="${ejb.dd.dir}" />
<!--      <strutsform /> -->
<!--      <castormapping destdir="${ejb.dd.dir}" validatexml="false" /> -->
      <jboss version="4.0" unauthenticatedPrincipal="nobody" 
        xmlencoding="UTF-8" destdir="${ejb.dd.dir}" validatexml="false" 
        datasource="PLEASE_MODIFY_THIS" 
        datasourcemapping="PLEASE_MODIFY_THIS" 
        preferredrelationmapping="PLEASE_MODIFY_THIS" />
<!--      <weblogic version="6.1" xmlencoding="UTF-8" destdir="${ejb.dd.dir}" 
        validatexml="false" datasource="PLEASE_MODIFY_THIS" 
        mergedir="${ejb.dd.dir}" persistence="weblogic" />
      <jrun version="4.0" xmlencoding="UTF-8" destdir="${ejb.dd.dir}" 
        validatexml="false" />
      <webSphere destdir="${ejb.dd.dir}"/>
      <jonas version="3.2" xmlencoding="UTF-8" destdir="${ejb.dd.dir}" 
        validatexml="false" mergedir="${ejb.dd.dir}" />
      <orion destdir="${ejb.dd.dir}" />
      <apachesoap destdir="${ejb.dd.dir}" />
      -->
    </ejbdoclet>
  </target>
  
	<!-- Compile all source files and copy all non-java
       files from src.dir to bin.dir -->
  <target name="compile.pre" depends="init" description="internal: Call configuerd targets before compile">
  	<dolocaliftrue boolean="true" target="compile.pre"/>
    <doiftrue boolean="${j2ee.jpoxenhance.enable}" target="clean"/>
    <mkdir dir="${project.dir}/${bin.dir}"/>
    <ant antfile="${build.file}" target="xdoclet"/>
  </target>

	<!-- Compile all source files and copy all non-java
       files from src.dir to bin.dir -->
  <target name="compile.main" description="internal: Compile">
  	<dolocaliftrue boolean="true" target="compile.main.pre"/>
    <mkdir dir="${project.dir}/${bin.dir}"/>
    <mkdir dir="${project.dir}/${ejbsrc.dir}"/>
    <javac debug="${javac.debug}" source="${javac.source}" target="${javac.target}" destdir="${project.dir}/${bin.dir}" classpath="${project.path}">
      <src path="${project.dir}/${src.dir}"/>
      <src path="${project.dir}/${ejbsrc.dir}"/>
    </javac>
    <copy todir="${project.dir}/${bin.dir}">
      <fileset dir="${project.dir}/${src.dir}" excludes="**/*.java"/>
      <fileset dir="${project.dir}/${ejbsrc.dir}" excludes="**/*.java"/>
    </copy>
  	<dolocaliftrue boolean="true" target="compile.main.post"/>
  </target>

	<!-- Do what needs to be done after compile:
       i.e. jpoxenhance -->
  <target name="compile.post" description="internal: Call configured targets after compile">
    <doiftrue boolean="${j2ee.jpoxenhance.enable}" target="jpoxenhance"/>
  	<dolocaliftrue boolean="true" target="compile.post"/>
  </target>

	<!-- Compile all client source files and copy all non-java
       files from src.dir and ejbsrc.dir to bin.dir -->
  <target name="compile.client.main" description="internal: Compile client classes/interfaces">
  	<dolocaliftrue boolean="true" target="compile.client.main.pre"/>
    <mkdir dir="${project.dir}/${bin.dir}"/>
    <mkdir dir="${project.dir}/${ejbsrc.dir}"/>
    <javac debug="${javac.debug}" source="${javac.source}" target="${javac.target}" destdir="${project.dir}/${bin.dir}" classpath="${project.path}" excludes="${j2ee.clientbuild.excludes}" includes="${j2ee.clientbuild.includes}">
      <src path="${project.dir}/${src.dir}"/>
      <src path="${project.dir}/${ejbsrc.dir}"/>
    </javac>
    <copy todir="${project.dir}/${bin.dir}">
      <fileset dir="${project.dir}/${src.dir}" excludes="**/*.java"/>
      <fileset dir="${project.dir}/${ejbsrc.dir}" excludes="**/*.java"/>
    </copy>
  	<dolocaliftrue boolean="true" target="compile.client.main.post"/>
  </target>

	<!-- Create the client jar file -->
  <target name="dist.bin.client" depends="compile.client" description="internal: Create a client package">
  	<dolocaliftrue boolean="true" target="dist.bin.client.pre"/>
    <mkdir dir="${project.dir}/${dist.dir}/" />
    <delete file="${project.dir}/${dist.dir}/${j2ee.client.jar}" failonerror="false" />
    <jar jarfile="${project.dir}/${dist.dir}/${j2ee.client.jar}">
      <fileset dir="${project.dir}/${bin.dir}" excludes="${j2ee.clientdist.excludes}" includes="${j2ee.clientdist.includes}" />
    </jar>
  	<dolocaliftrue boolean="true" target="dist.bin.client.post"/>
  </target>

	<!-- Create the server jar file -->
  <target name="dist.bin" depends="compile" description="internal: Create a jar file">
  	<dolocaliftrue boolean="true" target="dist.bin.pre"/>
    <mkdir dir="${project.dir}/${dist.dir}/" />
    <delete file="${project.dir}/${dist.dir}/${project.jar}" failonerror="false" />
    <jar jarfile="${project.dir}/${dist.dir}/${project.jar}">
      <fileset dir="${project.dir}/${bin.dir}" excludes="${dist.bin.excludes}" includes="${dist.bin.includes}"/>
<!--
      <fileset dir="${project.dir}/${bin.dir}">
        <include name="**/*.*"/>
      </fileset>
-->
      <fileset dir="${project.dir}/${project.name}">
        <include name="META-INF/ejb-jar.xml"/>
      	<include name="META-INF/ejb-rolegroup.xml"/>
       	<include name="META-INF/jboss.xml"/>
		<include name="META-INF/datastoreinit.xml"/>
        <include name="META-INF/*-ds.xml"/>
        <include name="META-INF/ra.xml"/>
      </fileset>
    </jar>
  	<dolocaliftrue boolean="true" target="dist.bin.post"/>
  </target>

	<!-- Create the server rar file -->
  <target name="dist.bin.rar" depends="dist.bin" description="internal: Create a rar file">
  	<dolocaliftrue boolean="true" target="dist.bin.rar.pre"/>
    <copy file="${project.dir}/${dist.dir}/${project.jar}" tofile="${project.dir}/${dist.dir}/${project.rar}"/>
  	<dolocaliftrue boolean="true" target="dist.bin.rar.post"/>
  </target>
  
	<!-- Create the server war file -->
  <target name="dist.bin.war" depends="compile" description="internal: Create a war file">
  	<dolocaliftrue boolean="true" target="dist.bin.war.pre"/>
    <mkdir dir="${project.dir}/${dist.dir}/" />
    <delete file="${project.dir}/${dist.dir}/${project.war}" failonerror="false" />

	  <property name="rawdist" value=".build-tmp" />
  
    <mkdir dir="${project.dir}/${rawdist}"/>
    <mkdir dir="${project.dir}/${rawdist}/WEB-INF"/>
    <mkdir dir="${project.dir}/${rawdist}/WEB-INF/classes"/>
    <mkdir dir="${project.dir}/${rawdist}/WEB-INF/lib"/>
    <copy todir="${project.dir}/${rawdist}">
      <fileset dir="${project.dir}/${project.name}">
        <include name="**/*.*"/>
        <exclude name="**/jsp_servlet/*.class"/>
        <exclude name="**/build.xml"/>
        <exclude name="**/deploy.xml"/>
        <exclude name="**/build.properties"/>
        <exclude name="**/servers.xml"/>
        <exclude name="**/targets.xml"/>
        <exclude name="**/*.war"/>
      </fileset>
    </copy>
    <copy todir="${project.dir}/${rawdist}/WEB-INF/classes">
      <fileset dir="${project.dir}/${bin.dir}">
        <include name="**/*.*"/>
        <exclude name="**/jsp_servlet/*.class"/>
      </fileset>
    </copy>

  	<jar jarfile="${project.dir}/${dist.dir}/${project.war}" basedir="${rawdist}"/>
		<delete includeEmptyDirs="true">
	  <fileset dir="${project.dir}" includes="${rawdist}/**/*,${rawdist}"/>
	</delete>

  	<dolocaliftrue boolean="true" target="dist.bin.war.post"/>
  </target>

</project>