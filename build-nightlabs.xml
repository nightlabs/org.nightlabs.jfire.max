<!--
  Generic eclipse/rcp-plugin ant build file 
  Version: 2008-04-23
  Author: marc [at] nightlabs [dot] de
  Author: marco [at] nightlabs [dot] de
  Author: marius [at] nightlabs [dot] de

  Do NOT modify this file!!! It must be the same in all eclipse/rcp-plugins!
  
  To extend this build file you can create ant build files in this directory that 
  are executed before (*pre.xml) or after (*post.xml) the targets in this file:
    - build-nightlabs-clean.pre.xml
    - build-nightlabs-clean.post.xml
    - build-nightlabs-compile.pre.xml
    - build-nightlabs-compile.post.xml
    - build-nightlabs-dist.pre.xml
    - build-nightlabs-dist.post.xml
    - build-nightlabs-deploy.pre.xml
    - build-nightlabs-deploy.post.xml
    
  Additionally, you have the possibility to overwrite the internal targets completely
  by creating the following ant build files in the local directory:
    - build-nightlabs-clean.xml
    - build-nightlabs-compile.xml
    - build-nightlabs-dist.xml
    - build-nightlabs-deploy.xml
    
  Properties debug can be switched on by setting "debug.properties=true" in one of the
  used .properties files (build-nightlabs.properties is recommended).
-->
<project default="dist" name="nightlabs.rcp">
	<target name="clean" depends="internal.init" description="Clean the project">
		<doexternal target="clean.pre"/>
		<doexternal target="clean" else-target="clean.impl"/>
		<doexternal target="clean.post"/>
	</target>
	
	<target name="compile" depends="internal.init" description="Compile the project">
		<doexternal target="compile.pre"/>
		<doexternal target="compile" else-target="compile.impl"/>
		<doexternal target="compile.post"/>
	</target>

	<target name="dist" depends="compile" description="Create a distrubution package for the project">
		<doexternal target="dist.pre"/>
		<doexternal target="dist" else-target="dist.impl"/>
		<doexternal target="dist.post"/>
	</target>

	<target name="deploy" depends="dist" description="Deploy the project">
		<doexternal target="deploy.pre"/>
		<doexternal target="deploy" else-target="deploy.impl"/>
		<doexternal target="deploy.post"/>
	</target>

	<target name="clean.impl">
	    <delete includeEmptyDirs="true" verbose="true">
			<fileset dir="${project.dir}" excludes="${clean.excludes}" includes="${clean.includes}"/>      
	    </delete>
	</target>
	
	<target name="compile.impl">
	    <mkdir dir="${project.dir}/${bin.dir}"/>
	    <javac debug="${javac.debug}" encoding="UTF-8" source="${javac.source}" target="${javac.target}" destdir="${project.dir}/${bin.dir}" classpath="${project.path}">
	      <src path="${project.dir}/${src.dir}"/>
	    </javac>
	    <copy todir="${project.dir}/${bin.dir}">
	      <fileset dir="${project.dir}/${src.dir}" excludes="**/*.java"/>
	    </copy>
	</target>
	
	<target name="dist.impl">
	    <mkdir dir="${project.dir}/${dist.dir}/plugins"/>
		
	    <mkdir dir="${project.dir}/${dist.dir}/plugins/${project.name}_${project.version}"/>
	    <copy todir="${project.dir}/${dist.dir}/plugins/${project.name}_${project.version}">
	      <fileset dir="${project.dir}" includes="${bin.includes}"/>
	    </copy>
		<antcall target="internal.dist.binjar"/>
		<antcall target="internal.dist.innerjar"/>
		<antcall target="internal.dist.direct"/>
		<replaceregexp 
			file="${project.dir}/${dist.dir}/plugins/${project.name}_${project.version}/META-INF/MANIFEST.MF" 
			match="Bundle-Version: ${project.versionwithoutqualifier}\.qualifier"
			replace="Bundle-Version: ${project.version}"/>
		
		<antcall target="internal.dist.pluginjar"/>
		<antcall target="internal.dist.removeplugindir"/>
	</target>
	
	<target name="deploy.impl">
		<if boolean="${rcp.deploy.allplatforms.enable}" then-target="internal.deploy.allplatforms"/>
		<if boolean="${rcp.deploy.win32.enable}" then-target="internal.deploy.win32"/>
		<if boolean="${rcp.deploy.linux-gtk32.enable}" then-target="internal.deploy.linux-gtk32"/>
		<if boolean="${rcp.deploy.linux-gtk64.enable}" then-target="internal.deploy.linux-gtk64"/>
	</target>
	
	
	<!-- ############ INTERNAL TASKS ############ -->
	
	<target name="internal.init" depends="internal.init.base, internal.init.osgi, internal.init.version.qualifier, internal.init.version.noqualifier, internal.init.debug">
		<condition property="internal.do.dist.pluginjar"><istrue value="${dist.pluginjar.enable}"/></condition>
		<condition property="internal.deploy.includes" value="${project.name}_${project.version}.jar"><istrue value="${dist.pluginjar.enable}"/></condition>
		<condition property="internal.do.dist.plugindir"><istrue value="${dist.plugindir.enable}"/></condition>
		<condition property="internal.deploy.includes" value="${project.name}_${project.version}/**/*"><istrue value="${dist.plugindir.enable}"/></condition>
	</target>
	
	<target name="internal.init.base">
		<!-- load the config files -->
	  	<property file="build-nightlabs-path.properties"/>
	    <property file="build-nightlabs.properties"/>
	    <property file="build.properties"/>
		<!-- TODO: is this still needed? -->
	    <xmlproperty file="plugin.xml" collapseAttributes="true"/>
		
		<!-- get the build identifier string from build.properties
		     note that this might lead to unexpected results if there
		     are more than one "source..." and "output..." entries. -->
		<grep property="project.buildid"
		      srcFile="build.properties"
		      pattern="^source\.(.+?)\s*=.*$"/>

		<!-- finf out if there should be an inner jar. This is true
		     if the source entry is in the form "source.xyz.jar". -->
		<grep property="internal.do.distinnerjar"
		      srcFile="build.properties"
		      pattern="^source\.(.+).jar\s*=.*$"/>

		<!-- java compiler option default: debugging -->
		<property name="javac.debug" value="true"/>
	  	<!-- java compiler option default: source (e.g. "1.3", "1.4", "1.5") -->
	  	<property name="javac.source" value="6"/>
	 	<!-- java compiler option default: target (e.g. "1.3", "1.4", "1.5") -->
	  	<property name="javac.target" value="${javac.source}"/>
		
		<!-- project dir default -->
		<property name="project.dir" value="."/>
		<!-- taken from build.properties -->
		<nestedproperty property="src.dir" first="source." second="${project.buildid}"/>
		<nestedproperty property="bin.dir" first="output." second="${project.buildid}"/>
		
		<property name="lib.dir" value="lib"/>
		<property name="rcp.deploy.allplatforms.dir" value="/tmp/rcp/all/plugins"/>
		<property name="rcp.deploy.allplatforms.enable" value="true"/>
		<property name="rcp.deploy.win32.dir" value="/tmp/rcp/win32/plugins"/>
		<property name="rcp.deploy.win32.enable" value="false"/>
		<property name="rcp.deploy.linux-gtk32.dir" value="/tmp/rcp/linux-gtk32/plugins"/>
		<property name="rcp.deploy.linux-gtk32.enable" value="false"/>
		<property name="rcp.deploy.linux-gtk64.dir" value="/tmp/rcp/linux-gtk64/plugins"/>
		<property name="rcp.deploy.linux-gtk64.enable" value="false"/>
		<property name="dist.dir" value="dist"/>
		<property name="dist.pluginjar.enable" value="true"/>
		<property name="dist.plugindir.enable" value="false"/>
		
	  	<!--
	  		find out, whether we deploy a plugin or a feature and set the property ${rcp.deploy.subdir} to:
	  			- "plugins"
	  			- "features"
	  	-->
	  	<available file="${project.dir}/feature.xml" property="rcp.deploy.subdir" value="features"/>
	   	<property name="rcp.deploy.subdir" value="plugins"/>
		
		<available property="internal.do.usemanifest" file="${project.dir}/META-INF/MANIFEST.MF"/>
		<condition property="internal.do.debug"><istrue value="${debug.properties}"/></condition>
	</target>

	<target name="internal.init.osgi" if="internal.do.usemanifest">
		<property file="${project.dir}/META-INF/MANIFEST.MF"/>
		<!-- use magic regexp style to extract the bundle's
		     name from the MANIFEST.MF
		     could be Bundle-SymbolicName: my.bundle.name; other-prop:=propvalue; ...
		-->
		<grep
			property="project.name"
			srcFile="${project.dir}/META-INF/MANIFEST.MF"
			pattern="^Bundle-SymbolicName:\s*(.+)\;.*$"/>
		<grep
			property="project.name"
			srcFile="${project.dir}/META-INF/MANIFEST.MF"
			pattern="^Bundle-SymbolicName:\s*(.+)$"/>

		<grep
			property="internal.do.useversionqualifier"
			srcFile="${project.dir}/META-INF/MANIFEST.MF"
			pattern="^Bundle-Version:\s*(.+\.qualifier)$"/>

		<!-- set if using qualifier -->
		<grep
			property="project.versionwithoutqualifier"
			srcFile="${project.dir}/META-INF/MANIFEST.MF"
			pattern="^Bundle-Version:\s*(.+)\.qualifier$"/>

		<!-- set if not using qualifier -->
		<grep
			property="project.versionwithoutqualifier"
			srcFile="${project.dir}/META-INF/MANIFEST.MF"
			pattern="^Bundle-Version:\s*(.+)$"/>
	</target>
	
	<target name="internal.init.version.qualifier" if="internal.do.useversionqualifier">
	    <condition property="project.versionqualifier" value="${forceContextQualifier}">
	      <and>
	        <not><isset property="project.versionqualifier"/></not>
	        <isset property="forceContextQualifier"/>
	      </and>
	    </condition>
		<property name="project.versionqualifier" value="local"/>
		<property name="project.version" value="${project.versionwithoutqualifier}.${project.versionqualifier}"/>
	</target>

	<target name="internal.init.version.noqualifier" unless="internal.do.useversionqualifier">
		<property name="project.version" value="${project.versionwithoutqualifier}"/>
	</target>

	<target name="internal.init.debug" if="internal.do.debug">
		<echo>project.buildid: ${project.buildid}</echo>
		<echo>project.buildinnerjar: ${project.buildinnerjar}</echo>
	    <echo>project name: ${project.name}</echo>
	    <echo>project version: ${project.version}</echo>
	    <echo>project dir: ${project.dir}</echo>
	    <echo>src dir: ${project.dir}/${src.dir}</echo>
	    <echo>bin dir: ${project.dir}/${bin.dir}</echo>
	    <echo>dist dir: ${project.dir}/${dist.dir}</echo>
	    <echo>clean includes: ${clean.includes}</echo>
	    <echo>clean excludes: ${clean.excludes}</echo>
	    <echo>project path: ${project.path}</echo>
	    <echo>rcp.deploy.allplatforms.enable: ${rcp.deploy.allplatforms.enable}</echo>
	  	<echo>rcp.deploy.allplatforms.dir: ${rcp.deploy.allplatforms.dir}</echo>
	  	<echo>rcp.deploy.win32.enable: ${rcp.deploy.win32.enable}</echo>
	  	<echo>rcp.deploy.win32.dir: ${rcp.deploy.win32.dir}</echo>
	  	<echo>rcp.deploy.linux-gtk32.enable: ${rcp.deploy.linux-gtk32.enable}</echo>
	  	<echo>rcp.deploy.linux-gtk32.dir: ${rcp.deploy.linux-gtk32.dir}</echo>
	  	<echo>rcp.deploy.linux-gtk64.enable: ${rcp.deploy.linux-gtk64.enable}</echo>
	  	<echo>rcp.deploy.linux-gtk64.dir: ${rcp.deploy.linux-gtk64.dir}</echo>
		<echo>javac.debug: ${javac.debug}</echo>
		<echo>javac.source: ${javac.source}</echo>
		<echo>javac.target: ${javac.target}</echo>
	</target>
	
	<target name="internal.dist.pluginjar" if="internal.do.dist.pluginjar">
		<jar destfile="${project.dir}/${dist.dir}/plugins/${project.name}_${project.version}.jar" 
			manifest="${project.dir}/${dist.dir}/plugins/${project.name}_${project.version}/META-INF/MANIFEST.MF">
			<fileset dir="${project.dir}/${dist.dir}/plugins/${project.name}_${project.version}">
				<include name="**/*"/>
			</fileset>
		</jar>
	</target>

	<target name="internal.dist.removeplugindir" unless="internal.do.dist.plugindir">
		<delete dir="${project.dir}/${dist.dir}/plugins/${project.name}_${project.version}"/>
	</target>

	<target name="internal.dist.binjar">
		<jar destfile="${project.dir}/${dist.dir}/${project.name}.jar">
			<fileset dir="${project.dir}/${bin.dir}">
    			<include name="**/*"/>
			</fileset>
		</jar>
	</target>
	
	<target name="internal.dist.innerjar" if="internal.do.distinnerjar">
		<jar destfile="${project.dir}/${dist.dir}/plugins/${project.name}_${project.version}/${project.buildid}">
			<fileset dir="${project.dir}/${bin.dir}">
    			<include name="**/*"/>
			</fileset>
		</jar>
	</target>

	<target name="internal.dist.direct" unless="internal.do.distinnerjar">
		<copy todir="${project.dir}/${dist.dir}/plugins/${project.name}_${project.version}">
			<fileset dir="${project.dir}/${bin.dir}">
    			<include name="**/*"/>
			</fileset>
		</copy>
	</target>
	
	<target name="internal.deploy.allplatforms">
		<doDeploy platform="allplatforms"/>
	</target>

	<target name="internal.deploy.win32">
		<doDeploy platform="win32"/>
	</target>

	<target name="internal.deploy.linux-gtk32">
		<doDeploy platform="linux-gtk32"/>
	</target>

	<target name="internal.deploy.linux-gtk64">
		<doDeploy platform="linux-gtk64"/>
	</target>
	
	
	
	<!-- ############ MACROS ############ -->
	
    <macrodef name="grep">
        <attribute name="srcFile"/>
        <attribute name="property"/>
        <attribute name="pattern"/>
    	<attribute name="replace" default="\1"/>
        <sequential>
    		<loadfile
    		      property="@{property}"
    		      srcFile="@{srcFile}">
    		      <filterchain>
    		        <tokenfilter>
    		          <containsregex 
    		          	pattern="@{pattern}"
    		          	replace="@{replace}"
    		          />
    		        </tokenfilter>
    		        <striplinebreaks/>
    		      </filterchain>
    		    </loadfile>
    	</sequential>
    </macrodef>

    <macrodef name="nestedproperty">
    	<attribute name="property"/>
        <attribute name="first"/>
        <attribute name="second"/>
        <sequential>
            <property name="@{property}" value="${@{first}@{second}}"/>
        </sequential>
    </macrodef>

	<!-- This macro executes a target in a given buildfile
       (attributes then-target, then-buildfile) if a given
       value is true (attribute boolean). Otherwise (if
       boolean is false) it executes an alternative target
       (attributes else-target, else-buildfile). Else attributes
       are optional.
       The macro does this by creating a temporary 
       buildfile and calling back this buildfile from
       there. -->
	<macrodef name="if_impl">
		<attribute name="boolean"/>
		<attribute name="then-target"/>
		<attribute name="then-buildfile" />
		<attribute name="else-target" default="" />
		<attribute name="else-buildfile" default="" />
		<sequential>
			<tempfile property="tmpbuildfile.@{then-target}-@{then-buildfile}-@{else-target}-@{else-buildfile}-@{boolean}.name" prefix=".tmpbuild-" suffix=".xml" />
			<property name="tmpbuildfile.@{then-target}-@{then-buildfile}-@{else-target}-@{else-buildfile}-@{boolean}.content.pre" value="&lt;project name=&quot;tmp-build&quot; default=&quot;run&quot;&gt;&lt;delete file=&quot;${tmpbuildfile.@{then-target}-@{then-buildfile}-@{else-target}-@{else-buildfile}-@{boolean}.name}&quot; deleteonexit=&quot;true&quot; quiet=&quot;true&quot;/&gt;&lt;target name=&quot;run&quot;&gt;"/>
			<property name="tmpbuildfile.@{then-target}-@{then-buildfile}-@{else-target}-@{else-buildfile}-@{boolean}.content.post" value="&lt;/target&gt;&lt;/project&gt;"/>
			<condition property="tmpbuildfile.@{then-target}-@{then-buildfile}-@{else-target}-@{else-buildfile}-@{boolean}.content" value="&lt;ant antfile=&quot;@{then-buildfile}&quot; target=&quot;@{then-target}&quot;/&gt;">
				<istrue value="@{boolean}"/>
			</condition>
			<condition property="tmpbuildfile.@{then-target}-@{then-buildfile}-@{else-target}-@{else-buildfile}-@{boolean}.content" value="&lt;ant antfile=&quot;@{else-buildfile}&quot; target=&quot;@{else-target}&quot;/&gt;">
				<and>
					<not><istrue value="@{boolean}"/></not>
					<not><equals arg1="@{else-buildfile}" arg2="" trim="true"/></not>
					<not><equals arg1="@{else-target}" arg2="" trim="true"/></not>
				</and>
			</condition>
			<condition property="tmpbuildfile.@{then-target}-@{then-buildfile}-@{else-target}-@{else-buildfile}-@{boolean}.content" value="">
				<not><isset property="tmpbuildfile.@{then-target}-@{then-buildfile}-@{else-target}-@{else-buildfile}-@{boolean}.content"/></not>
			</condition>
			<echo file="${tmpbuildfile.@{then-target}-@{then-buildfile}-@{else-target}-@{else-buildfile}-@{boolean}.name}">${tmpbuildfile.@{then-target}-@{then-buildfile}-@{else-target}-@{else-buildfile}-@{boolean}.content.pre}${tmpbuildfile.@{then-target}-@{then-buildfile}-@{else-target}-@{else-buildfile}-@{boolean}.content}${tmpbuildfile.@{then-target}-@{then-buildfile}-@{else-target}-@{else-buildfile}-@{boolean}.content.post}</echo>
			<ant antfile="${tmpbuildfile.@{then-target}-@{then-buildfile}-@{else-target}-@{else-buildfile}-@{boolean}.name}"/>
			<!--
			<delete quiet="true" file="${tmpbuildfile.@{then-target}-@{then-buildfile}-@{else-target}-@{else-buildfile}-@{boolean}.name}"/>
			-->
		</sequential>
	</macrodef>

	<macrodef name="if">
		<attribute name="boolean"/>
		<attribute name="then-target"/>
		<attribute name="then-buildfile" default="${ant.file}" />
		<attribute name="else-target" default="" />
		<attribute name="else-buildfile" default="${ant.file}" />
		<sequential>
			<if_impl boolean="@{boolean}" then-buildfile="@{then-buildfile}" then-target="@{then-target}" else-buildfile="@{else-buildfile}" else-target="@{else-target}" />
		</sequential>
	</macrodef>

	<!-- This macro executes a target in an external buildfile
	       (attribute target extended with the prefix "build-nightlabs-" and the suffix ".xml")
	       if the external build file exists and boolean is true. If boolean
	       is false or the external file does not exists else-target will be
	       executed. If no else target is given, nothing will happen. -->
	<macrodef name="doexternal">
		<attribute name="boolean" default="true" />
		<attribute name="target"/>
		<attribute name="else-buildfile" default="${ant.file}" />
		<attribute name="else-target" default="" />
		<sequential>
		  	<!-- ${doexec} is set to true, if the build-nightlabs-@{target}.xml exists
		  		In this case, the external target will be called. -->
			<property name="build.file.local-@{target}-@{boolean}" value="build-nightlabs-@{target}.xml"/>
	  	<available file="${build.file.local-@{target}-@{boolean}}" property="doexec-@{target}-@{boolean}" value="@{boolean}"/>
			<condition property="doexec-@{target}-@{boolean}" value="false">
				<not><isset property="doexec-@{target}-@{boolean}"/></not>
			</condition>
			<if 
					boolean="${doexec-@{target}-@{boolean}}" 
					then-buildfile="${build.file.local-@{target}-@{boolean}}" 
					then-target="@{target}"
					else-buildfile="@{else-buildfile}"
					else-target="@{else-target}"/>
		</sequential>
	</macrodef>
	
	<!-- = = = = = = = = = = = = = = = = =
	    macrodef: doDeploy (used by all deploy.* targets)
	    = = = = = = = = = = = = = = = = = -->
	<macrodef name="doDeploy">
		<attribute name="platform" />
		<sequential>
			<mkdir dir="${rcp.deploy.@{platform}.dir}/${rcp.deploy.subdir}"/>
			<copy todir="${rcp.deploy.@{platform}.dir}/${rcp.deploy.subdir}">
				<fileset dir="${project.dir}/${dist.dir}/plugins" includes="${internal.deploy.includes}"/>
			</copy>
		</sequential>
	</macrodef>
	
</project>