<?xml version="1.0" encoding="UTF-8"?>
<!-- Reporting Initialiser DTD - version 0.1 -->
<!-- Author: Alexander Bieber -->

<!-- 
  The Report intialiser scans through directories and looks for xml files
  named content.xml. Each subdirectory will be a new report category in the
  tree of reporting items. The content.xml file can specify details of the
  category and the report layouts within this category.
  
  The root element of each content.xml file is <report-category>.
  The report-category element has two optional attributes.
  id: to specify the category id (defaults to the folder name)
  type: to specify the category type (defaults to its parent type)  
-->
<!ELEMENT report-category ( name*, description*, report+ ) >
<!ATTLIST report-category 
	id NMTOKEN #IMPLIED
	type NMTOKEN #IMPLIED
>

<!--
  Besides the name elements that define the categories or reports name 
  the report-category element can have one sub-element <report>.
  The <report> element defines a report layout in the actual category.
  It will get the type of its category and like for the category the
  id can be specified or defaults to the reports filename (without extension).
  The 'file' attribute of the report element is required. It should point
  to the filename of the report-desing file that will be added as layout to
  the report registry.
  The 'overwriteOnInit' attribute is optional. It defaults to false and can
  be used to force resetting of report layouts. 
-->
<!ELEMENT report ( name*, description*, parameter-acquisition? ) >
<!ATTLIST report 
	file NMTOKEN #REQUIRED
	id NMTOKEN #IMPLIED
	overwriteOnInit NMTOKEN #IMPLIED
>

<!-- 
  <name> elements are used for all elements that carry a i18n name.
  They are used like
  <name language="en">MyName</name>
-->
<!ELEMENT name ( #PCDATA ) >
<!ATTLIST name language NMTOKEN #REQUIRED >

<!-- 
  <description> elements are used for elements that carry a long i18n description.
  They are used like
  <description language="en">MyName</description>
-->
<!ELEMENT description ( #PCDATA ) >
<!ATTLIST description language NMTOKEN #REQUIRED >

<!--
  The <parameter-acquisition> element is the root element to define a 
  parameter acquisition workflow. The element does not have any attributes
  it consists of one or more <use-case>s.
-->
<!ELEMENT parameter-acquisition ( use-case+ ) >

<!--
  For each report layout multiple parameter acquisition use-cases can be defined.
  Each use-case must have an 'id' attribute defined. The id must be unique in the
  scope of an report layout.
  A use-case can be the default use-case for the parameter acquisition of a report layout.
  This is defined by the 'default' attribute.
  The 'overwriteOnInit' attribute is optional. It defaults to false and can
  be used to force resetting of the parameter acquisition workflow. 
  
  A use-case is build of three definitions:
    1. <parameters>
       Define the report parameters (the final value consumers)
    2. <value-provider-configs>
       Define references to ValueProviders defined in JFire.
    3. <value-consumer-bindings>
       Define bindings of the output of certain value-provider-configs
       to the input of some value-consumer. value-consumer can either be
       value-provider-configs or parameters
-->
<!ELEMENT use-case ( name*, description*, parameters, value-provider-configs, value-consumer-bindings ) >
<!ATTLIST use-case 
	id NMTOKEN #REQUIRED
	default NMTOKEN #IMPLIED
	overwriteOnInit NMTOKEN #IMPLIED
>

<!--
  By the <parameter> element report parameters are decleared within the parameter acquisition workflow.
  In spite of BIRT report parameters these parameters have no restrictions concerning
  their type.
  The 'id' attribute of a parameter must be unique within an use-case, as it is used to reference
  the parameter in the <value-consumer-bindings>.
  The 'name' attribute is also required and should reflect the BIRT parameter name.
  The 'type' attribute is also required and should reflect the actual parameter type (not the BIRT one).
  The graphical attributes (x, y) are optional and default to 0.
-->
<!ELEMENT parameters ( parameter+ ) >
<!ELEMENT parameter EMPTY >
<!ATTLIST parameter 
	id NMTOKEN #IMPLIED
	name NMTOKEN #REQUIRED
	type CDATA #REQUIRED
	x NMTOKEN #IMPLIED
	y NMTOKEN #IMPLIED 
>

<!--
  By the <value-provider-configs> element ValueProviders are imported in the parameter acquisition workflow.
  In the client GUI is registered to the ValueProviders that query data from the user. 
  In the xml initialisation a reference to an existing ValueProvider should be done.
  Here again the 'id' attribute of a provider-config must be unique within an use-case, as it is used to reference
  the provider-config in the <value-consumer-bindings>.
  The attributes 'organisationID', 'categoryID' and 'valueProviderID' are used to fully reference a ValueProvider
  and have to be defined for a <provider-config> element.
  All other attributes are optional and their default values are as follows:
    'pageIndex': 0
    'pageOrder': 0
    'showMessageInHeader': true
    'allowNullOutputValue': false
    'x': 0
    'y': 0
-->
<!ELEMENT value-provider-configs ( provider-config+ ) >
<!ELEMENT provider-config ( message* ) >
<!ATTLIST provider-config 
	id NMTOKEN #REQUIRED
	organisationID NMTOKEN #REQUIRED
	categoryID NMTOKEN #REQUIRED
	valueProviderID NMTOKEN #REQUIRED
	pageIndex NMTOKEN #IMPLIED
	pageRow NMTOKEN #IMPLIED
	pageColumn NMTOKEN #IMPLIED
	showMessageInHeader NMTOKEN #IMPLIED
	allowNullOutputValue NMTOKEN #IMPLIED
	x NMTOKEN #IMPLIED
	y NMTOKEN #IMPLIED
>

<!--
  the <message> element is used like the <name> element to define
  the message of a <value-provider-config>
-->
<!ELEMENT message ( #PCDATA ) >
<!ATTLIST message language NMTOKEN #REQUIRED >

<!--
  <value-consumer-bindings> complete the parameter acquisition workflow by mapping the
  output of <value-provider-configs> to the input of either a <parameter> of another <value-provider-config>.
  The objects are referenced by the ids given in the individual elements.
  A <value-consumer-binding> therfore consists of three sub elements:
    <binding-provider>: references with the id a <value-provider-config> whose output will server the input of the following consumer
    <binding-parameter>: references with its 'name' attribute the parameter name that is served by the providers output.
                         The parameter name can either be the id of a providers input parameter or the name of a report parameter
    <binding-consumer>: references with the id the consumer of the providers output value. This can be a <parameter> of a <value-provider-config>
-->
<!ELEMENT value-consumer-bindings ( value-consumer-binding+ ) >

<!ELEMENT value-consumer-binding ( binding-provider, binding-parameter, binding-consumer ) >

<!ELEMENT binding-provider EMPTY >
<!ATTLIST binding-provider id NMTOKEN #REQUIRED >

<!ELEMENT binding-consumer EMPTY >
<!ATTLIST binding-consumer id NMTOKEN #REQUIRED >

<!ELEMENT binding-parameter EMPTY >
<!ATTLIST binding-parameter name NMTOKEN #REQUIRED >
