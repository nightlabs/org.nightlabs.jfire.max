package org.nightlabs.jfire.numorgid;

import java.rmi.RemoteException;

import javax.ejb.CreateException;
import javax.ejb.EJBException;
import javax.ejb.SessionBean;
import javax.ejb.SessionContext;
import javax.jdo.JDOObjectNotFoundException;
import javax.jdo.PersistenceManager;

import org.nightlabs.jfire.base.BaseSessionBeanImpl;
import org.nightlabs.jfire.idgenerator.IDGenerator;
import org.nightlabs.jfire.idgenerator.IDNamespace;
import org.nightlabs.jfire.idgenerator.id.IDNamespaceID;
import org.nightlabs.jfire.numorgid.id.NumericOrganisationIdentifierID;
import org.nightlabs.jfire.security.User;

/**
 * @ejb.bean
 * 		name="jfire/ejb/JFireNumericOrganisationID/NumericOrganisationIdentifierManager"
 *    jndi-name="jfire/ejb/JFireNumericOrganisationID/NumericOrganisationIdentifierManager"
 *    type="Stateless"
 *    transaction-type="Container"
 * 
 * @ejb.util
 * 		generate="physical"
 */
public abstract class NumericOrganisationIdentifierManagerBean
extends BaseSessionBeanImpl
implements SessionBean
{
	private static final long serialVersionUID = 1L;

	/**
	 * Returns a numeric organisation ID for the current organisation if called for the root organisation.<br />
	 * This method should only be called by organisation users.
	 * 
	 * @ejb.interface-method
	 * @ejb.permission role-name="_Guest_"
	 * @ejb.transaction type="Required"
	 **/
	public int getNumericOrganisationID()
	{
		PersistenceManager pm = getPersistenceManager();
		try {
			String clientOrganisationID = getUserID();
			if (!clientOrganisationID.startsWith(User.USERID_PREFIX_TYPE_ORGANISATION))
				throw new IllegalStateException("Sorry, only organisations are allowed to query this information!");

			clientOrganisationID = clientOrganisationID.substring(User.USERID_PREFIX_TYPE_ORGANISATION.length());

			String localOrganisationID = getOrganisationID();
			String rootOrganisationID = getRootOrganisationID();

			if (! localOrganisationID.equals(rootOrganisationID))
				throw new IllegalStateException("You must not call this method for any other organisation than the root organisation. I am " + localOrganisationID + " - ask " + rootOrganisationID);

			NumericOrganisationIdentifierID numericOrganisationIdentifierID = NumericOrganisationIdentifierID.create(clientOrganisationID);
			try {
				NumericOrganisationIdentifier numericOrganisationIdentifier = (NumericOrganisationIdentifier) pm.getObjectById(numericOrganisationIdentifierID);
				return numericOrganisationIdentifier.getNumericOrganisationID();
			} catch (JDOObjectNotFoundException x) {
				// fine - ask the ID-generator and create the record
			}

			long id = IDGenerator.nextID(NumericOrganisationIdentifier.class);
			if (id > NumericOrganisationIdentifier.MAX_NUMERIC_ORGANISATION_ID)
				throw new IllegalStateException("Out of range! The id generated by the IDGenerator exceeds NumericOrganisationIdentifier.MAX_NUMERIC_ORGANISATION_ID!");

			NumericOrganisationIdentifier numericOrganisationIdentifier = new NumericOrganisationIdentifier(clientOrganisationID, (int) id);
			numericOrganisationIdentifier = pm.makePersistent(numericOrganisationIdentifier);
			return numericOrganisationIdentifier.getNumericOrganisationID();
		} finally {
			pm.close();
		}
	}

	/**
	 * Initialises an organisation datastore to be used with numeric organisation IDs.
	 * 
	 * @ejb.interface-method
	 * @ejb.permission role-name="_System_"
	 * @ejb.transaction type="Required"
	 */
	public void initialise()
	{
		PersistenceManager pm = getPersistenceManager();
		try {
			String localOrganisationID = getOrganisationID();
			String rootOrganisationID = getRootOrganisationID();

			if (! localOrganisationID.equals(rootOrganisationID))
				return; // We only want to assign a numeric organisation ID for the root organisation

			// Set conservative settings for the ID generator to not waste numeric organisation IDs due to the caching strategy
			IDNamespace idNamespace;
			try {
				idNamespace = (IDNamespace) pm.getObjectById(IDNamespaceID.create(rootOrganisationID, NumericOrganisationIdentifier.class.getName()));
			} catch (JDOObjectNotFoundException e) {
				idNamespace = new IDNamespace(rootOrganisationID, NumericOrganisationIdentifier.class.getName(), null);
				idNamespace.setCacheSizeClient(0);
				idNamespace.setCacheSizeServer(0);
				idNamespace.setNextID(1);
				
				idNamespace = pm.makePersistent(idNamespace);
			}

			try {
				NumericOrganisationIdentifierID numericOrganisationIdentifierID = NumericOrganisationIdentifierID.create(rootOrganisationID);
				pm.getObjectById(numericOrganisationIdentifierID);
				// if the id already exists, there's nothing to do
			} catch (JDOObjectNotFoundException x) {
				// otherwise we create it
				NumericOrganisationIdentifier numericOrganisationIdentifier = new NumericOrganisationIdentifier(rootOrganisationID, NumericOrganisationIdentifier.ROOT_ORGANISATION_NUMERIC_ORGANISATION_ID);
				numericOrganisationIdentifier = pm.makePersistent(numericOrganisationIdentifier);
			}
		} finally {
			pm.close();
		}
	}

	@Override
	public void setSessionContext(SessionContext sessionContext)
	throws EJBException, RemoteException
	{
		super.setSessionContext(sessionContext);
	}
	@Override
	public void unsetSessionContext() {
		super.unsetSessionContext();
	}

	/**
	 * @ejb.create-method
	 * @ejb.permission role-name="_Guest_"
	 */
	public void ejbCreate() throws CreateException { }

	/**
	 * @ejb.permission unchecked="true"
	 */
	@Override
	public void ejbRemove() throws EJBException, RemoteException { }
}
